generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                   String               @id @default(uuid())
  name                 String               @db.VarChar(100)
  email                String               @unique
  phoneNumber          String               @unique
  password             String
  avatar               String?
  description          String?
  gender               Gender               @default(Not_Informed)
  userType             UserType             @default(Customer)
  resetPasswordToken   String?
  resetPasswordExpires DateTime?
  isDeleted            Boolean              @default(false)
  createdAt            DateTime             @default(now())
  updatedAt            DateTime             @updatedAt
  applications         Application[]
  professionalProfile  ProfessionalProfile?
  services             Service[]
}

model ProfessionalProfile {
  id             String  @id @default(uuid())
  location       String
  specialty      String
  experience     String
  rating         Float   @default(0)
  price          Float
  reviews        Int     @default(0)
  available      Boolean @default(true)
  isPremium      Boolean @default(false)
  validated      Boolean @default(false)
  address        Json
  certifications Json
  contacts       Json
  social         Json
  services       Json
  schedule       Json
  reviewsList    Json
  userId         String  @unique
  user           User    @relation(fields: [userId], references: [id])
}

model Service {
  id                  String               @id @default(uuid())
  name                String               @db.VarChar(100)
  description         String
  schedules           Json
  advertiser          String               @db.VarChar(100)
  value               String               @default("A combinar")
  location            Json
  contactPhone        String               @db.VarChar(15)
  isActive            Boolean              @default(true)
  isDeleted           Boolean              @default(false)
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  createdById         String
  applications        Application[]
  createdBy           User                 @relation(fields: [createdById], references: [id])
  careCharacteristics CareCharacteristic[] @relation("ServiceToCareCharacteristic")
}

model Application {
  id          String   @id @default(uuid())
  appliedAt   DateTime @default(now())
  status      String   @default("Pending")
  isDeleted   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  applicantId String
  serviceId   String
  applicant   User     @relation(fields: [applicantId], references: [id])
  service     Service  @relation(fields: [serviceId], references: [id])
}

model CareCharacteristic {
  id          String    @id @default(uuid())
  name        String    @unique @db.VarChar(100)
  description String
  isDeleted   Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?
  services    Service[] @relation("ServiceToCareCharacteristic")
}

enum Gender {
  Female
  Male
  Other
  Not_Informed
}

enum UserType {
  Customer
  Backoffice
  Professional
}
